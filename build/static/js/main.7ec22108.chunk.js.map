{"version":3,"sources":["graphql/mutations.js","graphql/queries.js","aws-exports.js","App.js","graphql/subscriptions.js","serviceWorker.js","index.js"],"names":["createTodo","listTodos","awsmobile","API","configure","awsconfig","PubSub","initialState","todos","reducer","state","action","type","todo","createNewTodo","a","name","description","graphql","graphqlOperation","input","App","useReducer","dispatch","useEffect","todoData","data","items","getData","subscription","subscribe","next","eventData","value","onCreateTodo","unsubscribe","className","onClick","length","map","key","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2OAGaA,EAAU,wNCSVC,EAAS,wRCMPC,EAhBG,CACd,mBAAsB,YACtB,6BAAgC,iDAChC,mBAAsB,YACtB,kBAAqB,sBACrB,6BAAgC,4BAChC,MAAS,GACT,4BAA+B,iFAC/B,mBAAsB,YACtB,+BAAkC,4BAClC,4BAA+B,0CAC/B,mCAAsC,YACtC,yBAA4B,qF,OCFhCC,IAAIC,UAAUC,GACdC,IAAOF,UAAUC,GAGjB,IAGME,EAAe,CACnBC,MAAO,IAGHC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IATU,QAUR,OAAO,eAAIF,EAAX,CAAkBF,MAAOG,EAAOH,QAClC,IAViB,eAWf,OAAO,eAAIE,EAAX,CAAkBF,MAAM,GAAD,mBAAKE,EAAMF,OAAX,CAAkBG,EAAOE,SAClD,QACE,OAAOH,I,SAIEI,I,2EAAf,4BAAAC,EAAA,6DACQF,EAAO,CAAEG,KAAM,kBAAmBC,YAAa,wBADvD,SAEQd,IAAIe,QAAQC,YAAiBnB,EAAY,CAAEoB,MAAOP,KAF1D,4C,sBAsCeQ,MAjCf,WAAgB,IAAD,EACaC,qBAAWb,EAASF,GADjC,mBACNG,EADM,KACCa,EADD,KAoBb,OAjBAC,qBAAU,WAAM,4CACd,4BAAAT,EAAA,sEACyBZ,IAAIe,QAAQC,YAAiBlB,IADtD,OACQwB,EADR,OAEEF,EAAS,CAAEX,KA7BH,QA6BgBJ,MAAOiB,EAASC,KAAKzB,UAAU0B,QAFzD,4CADc,uBAAC,WAAD,wBAKdC,GAEA,IAAMC,EAAe1B,IAAIe,QAAQC,YC9CZ,+GD8C4CW,UAAU,CACzEC,KAAM,SAACC,GACL,IAAMnB,EAAOmB,EAAUC,MAAMP,KAAKQ,aAClCX,EAAS,CAAEX,KAnCE,eAmCkBC,YAInC,OAAO,kBAAMgB,EAAaM,iBACzB,IAGD,yBAAKC,UAAU,OACb,4BAAQC,QAASvB,GAAjB,YACA,6BACGJ,EAAMF,MAAM8B,OAAS,EACpB5B,EAAMF,MAAM+B,KAAI,SAAC1B,GAAD,OAAU,uBAAG2B,IAAK3B,EAAK4B,IAAK5B,EAAKG,KAAvB,MAAgCH,EAAKI,gBAC/D,iDErDUyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7ec22108.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createTodo = /* GraphQL */ `\n  mutation CreateTodo(\n    $input: CreateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    createTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n    }\n  }\n`;\nexport const updateTodo = /* GraphQL */ `\n  mutation UpdateTodo(\n    $input: UpdateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    updateTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n    }\n  }\n`;\nexport const deleteTodo = /* GraphQL */ `\n  mutation DeleteTodo(\n    $input: DeleteTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    deleteTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = /* GraphQL */ `\n  query GetTodo($id: ID!) {\n    getTodo(id: $id) {\n      id\n      name\n      description\n    }\n  }\n`;\nexport const listTodos = /* GraphQL */ `\n  query ListTodos(\n    $filter: ModelTodoFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        description\n      }\n      nextToken\n    }\n  }\n`;\n","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:ce30d3a2-f6c6-441a-b434-50c147f92e82\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_a8IvzYEes\",\n    \"aws_user_pools_web_client_id\": \"3qtmaah8hlnqhfhusn6u3jmka\",\n    \"oauth\": {},\n    \"aws_appsync_graphqlEndpoint\": \"https://p2rt5j4ahraifpiwpihocfcgme.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    \"aws_content_delivery_bucket\": \"myapp-20200216164951-hostingbucket-test\",\n    \"aws_content_delivery_bucket_region\": \"us-east-1\",\n    \"aws_content_delivery_url\": \"http://myapp-20200216164951-hostingbucket-test.s3-website-us-east-1.amazonaws.com\"\n};\n\n\nexport default awsmobile;\n","import React, { useEffect, useReducer } from 'react';\n\nimport API, { graphqlOperation } from '@aws-amplify/api';\nimport PubSub from '@aws-amplify/pubsub';\n\nimport { createTodo } from './graphql/mutations';\nimport { listTodos } from './graphql/queries';\nimport { onCreateTodo } from './graphql/subscriptions';\n\nimport awsconfig from './aws-exports';\nimport './App.css';\n\nAPI.configure(awsconfig);\nPubSub.configure(awsconfig);\n\n// Action Types\nconst QUERY = 'QUERY';\nconst SUBSCRIPTION = 'SUBSCRIPTION';\n\nconst initialState = {\n  todos: [],\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case QUERY:\n      return {...state, todos: action.todos};\n    case SUBSCRIPTION:\n      return {...state, todos:[...state.todos, action.todo]}\n    default:\n      return state;\n  }\n};\n\nasync function createNewTodo() {\n  const todo = { name: \"Use AWS AppSync\", description: \"RealTime and Offline\" };\n  await API.graphql(graphqlOperation(createTodo, { input: todo }));\n}\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  useEffect(() => {\n    async function getData() {\n      const todoData = await API.graphql(graphqlOperation(listTodos));\n      dispatch({ type: QUERY, todos: todoData.data.listTodos.items });\n    }\n    getData();\n\n    const subscription = API.graphql(graphqlOperation(onCreateTodo)).subscribe({\n      next: (eventData) => {\n        const todo = eventData.value.data.onCreateTodo;\n        dispatch({ type: SUBSCRIPTION, todo });\n      }\n    });\n\n    return () => subscription.unsubscribe();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <button onClick={createNewTodo}>Add Todo</button>\n      <div>\n        {state.todos.length > 0 ? \n          state.todos.map((todo) => <p key={todo.id}>{todo.name} : {todo.description}</p>) :\n          <p>Add some todos!</p> \n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateTodo = /* GraphQL */ `\n  subscription OnCreateTodo {\n    onCreateTodo {\n      id\n      name\n      description\n    }\n  }\n`;\nexport const onUpdateTodo = /* GraphQL */ `\n  subscription OnUpdateTodo {\n    onUpdateTodo {\n      id\n      name\n      description\n    }\n  }\n`;\nexport const onDeleteTodo = /* GraphQL */ `\n  subscription OnDeleteTodo {\n    onDeleteTodo {\n      id\n      name\n      description\n    }\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}